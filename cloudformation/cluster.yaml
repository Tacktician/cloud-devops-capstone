AWSTemplateFormatVersion: 2010-09-09
Description: >-
  James Tacker / Udacity Cloud DevOps Engineer Nanodegree
  This template deploys aws EKS resources for the capstone project.

Parameters:
  EnvironmentName:
    Description: An environment prefix for all resource names
    Type: String
    Default: capstone-project

Resources:
# Role policy to associate with Instance Profile
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS Cluster Security Group
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${EnvironmentName}-EKSSecurityGroup
      VpcId:
        Fn::ImportValue: capstone-project-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  # Role policy to associate with Instance Profile
  EKSClusterRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EKSAdminAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'eks:*'
            Resource: '*'
      Roles:
        - !Ref EKSClusterRole

  # Instance Profile to attach
  EKSClusterRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EKSClusterRole

  EKSNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - !Ref arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: EKSCluster
      Version: '1.15'
      RoleArn: !Ref EKSClusterRole
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSSecurityGroup
        SubnetIds:
          - Fn::ImportValue: capstone-project-public-subnet1
          - Fn::ImportValue: capstone-project-publiic-subnet2

  EKSNodeGroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !Ref EKSNodeGroupRole
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 3
      Subnets:
        - Fn::ImportValue: capstone-project-public-subnet1
        - Fn::ImportValue: capstone-project-public-subnet2

Outputs:
  ClusterRoleArn:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt EKSClusterRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ClusterRoleArn"

  NodeGroupArn:
    Description: The role that Amazon EKS will use to create AWS resources for Kubernetes clusters
    Value: !GetAtt EKSNodeGroupRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NodeGroupArn"